echo -e '    ____          __              ____          __'
echo -e '   /  _/___  ____/ /__  ___  ____/ / /_  ____ _/ /_'
echo -e '   / // __ \/ __  / _ \/ _ \/ __  / __ \/ __ `/ __/'
echo -e ' _/ // / / / /_/ /  __/  __/ /_/ / / / / /_/ / /_'
echo -e '/___/_/ /_/\__,_/\___/\___/\__,_/_/ /_/\__,_/\__/'

_ps_git_branch() {
    branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [ -z "${branch}" ]; then
        echo ''
        return 0
    fi

    echo "$(_ps_method Git ${branch})"
}

_ps_podctl_def() {
    if [[ ! -f ".podctl.toml" ]]; then 
        echo ''
        return 0
    fi

    NAME=$(grep "\bname\b" .podctl.toml | awk -F'"' '{ print $2 }')
    NAMESPACE=$(grep "\bnamespace\b" .podctl.toml | awk -F'"' '{ print $2 }')

    echo "$(_ps_method PodCTL "${NAMESPACE}.${NAME}")"
}

_ps_go_mod_def() {
    MOD=$(go env GOMOD)
    if [[ -z "${MOD}" || "${MOD}" == "/dev/null" ]]; then
        echo ''
        return 0
    fi

    MOD=$(cat $MOD | grep module | awk '{ print $2 }')
    echo "$(_ps_method GoModule "$MOD")"
}

_ps_go_work_def() {
    WORK=$(go env GOWORK)
    if [[ -z "${WORK}" ]]; then
        echo ''
        return 0
    fi

    WORK=$(echo $WORK | awk -F'/' '{ print $--NF }')
    echo "$(_ps_method GoWorkspace "$WORK")"
}

_ps_venv_def() {
    if [[ -z "${VIRTUAL_ENV}" ]]; then
        echo ''
        return 0
    fi

    echo "$(_ps_method PythonVenv "${VIRTUAL_ENV}")"
}

_ps_string() {
    echo "\[\e[36m\]\"${1}\"\[\e[0m\]"
}

_ps_method() {
    if [[ -z "${3}" ]]; then
        NL="\n    "
    fi

    echo "$(_ps_symbol '.')${NL}\e[34m\]${1}\[\e[0m\]$(_ps_symbol '(')$(_ps_string ${2})$(_ps_symbol ')')"
}

_ps_symbol() {
    printf "\[\e[2m\]${1}\[\e[0m\]"
}

_ps_build() {
    PS1="\n\u$(_ps_method Dir '\w' true)$(_ps_venv_def)$(_ps_git_branch)$(_ps_podctl_def)$(_ps_go_work_def)$(_ps_go_mod_def)\n\[\e[0m\]"
}

PROMPT_COMMAND='echo -ne "\033]0;$(basename ${PWD})\007" && _ps_build'

# vi: ft=sh
